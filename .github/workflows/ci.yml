name: CI

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
  workflow_dispatch:

concurrency:
    group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}'
    cancel-in-progress: true

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Go
              id: setup-go
              uses: actions/setup-go@v5
              with:
                go-version-file: server/go.mod
                cache: true
                cache-dependency-path: server/go.sum

            - name: Capture Go caches paths
              id: go-cache-paths
              working-directory: server
              run: |
                echo "GOMODCACHE=$(go env GOMODCACHE)" >> $GITHUB_ENV
                echo "GOCACHE=$(go env GOCACHE)" >> $GITHUB_ENV

            - name: Cache Go modules and build cache
              uses: actions/cache@v4
              with:
                path: |
                  ${{ env.GOMODCACHE }}
                  ${{ env.GOCACHE }}
                key: ${{ runner.os }}-go-${{ hashFiles('server/go.sum') }}-${{ steps.setup-go.outputs.go-version }}
                restore-keys: |
                  ${{ runner.os }}-go-${{ hashFiles('server/go.sum') }}-
                  ${{ runner.os }}-go-

            - name: Download modules
              working-directory: server
              run: go mod download

            - name: Build binaries
              shell: bash
              run: make build

            - name: go-test
              shell: bash
              run: make test

            - name: go-coverage
              shell: bash
              run: |-
                OUTPUT="$(make test-coverage)"
                TOTAL="$(echo $OUTPUT | awk 'END{print $NF}')"
                echo "::group::Coverage (${TOTAL})"
                echo "${OUTPUT}"
                echo "::endgroup::"

    lint:
        name: lint
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Go
              id: setup-go
              uses: actions/setup-go@v5
              with:
                go-version-file: server/go.mod
                cache: true
                cache-dependency-path: server/go.sum

            - name: Capture Go caches paths
              id: go-cache-paths
              working-directory: server
              run: |
                echo "GOMODCACHE=$(go env GOMODCACHE)" >> $GITHUB_ENV
                echo "GOCACHE=$(go env GOCACHE)" >> $GITHUB_ENV

            - name: Cache Go modules and build cache
              uses: actions/cache@v4
              with:
                path: |
                  ${{ env.GOMODCACHE }}
                  ${{ env.GOCACHE }}
                key: ${{ runner.os }}-go-${{ hashFiles('server/go.sum') }}-${{ steps.setup-go.outputs.go-version }}
                restore-keys: |
                  ${{ runner.os }}-go-${{ hashFiles('server/go.sum') }}-
                  ${{ runner.os }}-go-

            - name: Download modules
              working-directory: server
              run: go mod download
            
            - name: diff-check
              shell: bash
              run: |-
                set -eEu
                set +o pipefail
                make diff-check

            - name: golangci-lint
              uses: golangci/golangci-lint-action@v6
              with:
                version: latest
                working-directory: server
                args: --config ../.golangci.yaml

    build:
        name: build
        runs-on: ubuntu-latest
        outputs:
          cache-key: ${{ steps.cache-key.outputs.value }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Go
              id: setup-go
              uses: actions/setup-go@v5
              with:
                go-version-file: server/go.mod
                cache: true
                cache-dependency-path: server/go.sum

            - name: Capture Go caches paths
              id: go-cache-paths
              working-directory: server
              run: |
                echo "GOMODCACHE=$(go env GOMODCACHE)" >> $GITHUB_ENV
                echo "GOCACHE=$(go env GOCACHE)" >> $GITHUB_ENV

            - name: Cache Go modules and build cache
              uses: actions/cache@v4
              with:
                path: |
                  ${{ env.GOMODCACHE }}
                  ${{ env.GOCACHE }}
                key: ${{ runner.os }}-go-${{ hashFiles('server/go.sum') }}-${{ steps.setup-go.outputs.go-version }}
                restore-keys: |
                  ${{ runner.os }}-go-${{ hashFiles('server/go.sum') }}-
                  ${{ runner.os }}-go-

            - name: Download modules
              working-directory: server
              run: go mod download

            - name: Build binaries
              run: make build

            - name: Generate build cache key
              id: cache-key
              run: echo "value=${{ github.sha }}-${{ github.run_id }}" >> $GITHUB_OUTPUT

            - name: Cache built binaries
              uses: actions/cache@v4
              with:
                path: bin/
                key: ${{ runner.os }}-binaries-${{ steps.cache-key.outputs.value }}
                restore-keys: |
                  ${{ runner.os }}-binaries-

    integration-test-dev:
        name: integration-test-dev
        needs: build
        runs-on: ubuntu-latest
        environment: development
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Restore built binaries
              uses: actions/cache@v4
              with:
                path: bin/
                key: ${{ runner.os }}-binaries-${{ needs.build.outputs.cache-key }}
                restore-keys: |
                  ${{ runner.os }}-binaries-

            - name: Install dependencies
              run: sudo apt-get update && sudo apt-get install -y jq

            - name: Create .env file for DEV
              run: cp .env.dev .env

            - name: Start docker-compose services
              run: docker compose down -v && docker compose up -d

            - name: Wait for services to be ready
              run: |
                timeout 30s bash -c 'until curl -s http://localhost:8080/health > /dev/null; do sleep 1; done'

            - name: Run DEV integration tests
              run: make integration-test-dev

    integration-test-pre:
        name: integration-test-pre
        needs: integration-test-dev
        runs-on: ubuntu-latest
        environment: pre-production
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Restore built binaries
              uses: actions/cache@v4
              with:
                path: bin/
                key: ${{ runner.os }}-binaries-${{ needs.build.outputs.cache-key }}
                restore-keys: |
                  ${{ runner.os }}-binaries-

            - name: Install dependencies
              run: sudo apt-get update && sudo apt-get install -y jq

            - name: Create .env file for PRE
              run: |
                cat > .env << EOF
                PORT=8080
                ENABLE_TELEMETRY=0
                DB_HOST=postgres
                DB_PORT=5432
                DB_USER=cupid
                DB_PASSWORD=cupid123
                DB_NAME=cupid
                DB_SSLMODE=disable
                CUPID_BASE_URL=http://localhost:8081
                CUPID_SANDBOX_API=i2O4p6A8s0D3f5G7h9J1k3L5m7N9b
                HOTEL_ID=1641879
                ENV=pre
                EOF

            - name: Start docker-compose services
              run: docker compose down -v && docker compose up -d

            - name: Wait for services to be ready
              run: |
                timeout 30s bash -c 'until curl -s http://localhost:8080/health > /dev/null; do sleep 1; done'

            - name: Run PRE integration tests
              run: make integration-test-pre

    integration-test-pro:
        name: integration-test-pro
        needs: integration-test-pre
        runs-on: ubuntu-latest
        environment: production
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Restore built binaries
              uses: actions/cache@v4
              with:
                path: bin/
                key: ${{ runner.os }}-binaries-${{ needs.build.outputs.cache-key }}
                restore-keys: |
                  ${{ runner.os }}-binaries-

            - name: Install dependencies
              run: sudo apt-get update && sudo apt-get install -y jq

            - name: Create .env file for PRO
              run: |
                cat > .env << EOF
                PORT=8080
                ENABLE_TELEMETRY=0
                DB_HOST=postgres
                DB_PORT=5432
                DB_USER=cupid
                DB_PASSWORD=cupid123
                DB_NAME=cupid
                DB_SSLMODE=disable
                CUPID_BASE_URL=http://localhost:8081
                CUPID_SANDBOX_API=i2O4p6A8s0D3f5G7h9J1k3L5m7N9b
                HOTEL_ID=1641879
                ENV=pro
                EOF

            - name: Start docker-compose services
              run: docker compose down -v && docker compose up -d

            - name: Wait for services to be ready
              run: |
                timeout 30s bash -c 'until curl -s http://localhost:8080/health > /dev/null; do sleep 1; done'

            - name: Run PRO integration tests
              run: make integration-test-pro

    summary:
        name: summary
        needs: [integration-test-dev, integration-test-pre, integration-test-pro]
        runs-on: ubuntu-latest
        if: always()
        steps:
            - name: Multi-Environment Test Summary
              run: |
                echo "🎉 Multi-Environment Integration Test Summary"
                echo "=============================================="
                echo "DEV:  ${{ needs.integration-test-dev.result }}"
                echo "PRE:  ${{ needs.integration-test-pre.result }}"
                echo "PRO:  ${{ needs.integration-test-pro.result }}"
                echo ""
                if [[ "${{ needs.integration-test-dev.result }}" == "success" && "${{ needs.integration-test-pre.result }}" == "success" && "${{ needs.integration-test-pro.result }}" == "success" ]]; then
                  echo "✅ All environments passed!"
                  exit 0
                else
                  echo "❌ Some environments failed!"
                  exit 1
                fi